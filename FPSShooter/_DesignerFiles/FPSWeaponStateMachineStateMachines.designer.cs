// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class FPSWeaponStateMachineBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _BeginFiring;
    
    private StateMachineTrigger _EndFiring;
    
    private StateMachineTrigger _OnReload;
    
    private StateMachineTrigger _FinishedReloading;
    
    private StateMachineTrigger _OnEmpty;
    
    private Idle _Idle;
    
    private Firing _Firing;
    
    private Reloading _Reloading;
    
    private Empty _Empty;
    
    public FPSWeaponStateMachineBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger BeginFiring {
        get {
            if ((this._BeginFiring == null)) {
                this._BeginFiring = new StateMachineTrigger(this, "BeginFiring");
            }
            return this._BeginFiring;
        }
    }
    
    public virtual StateMachineTrigger EndFiring {
        get {
            if ((this._EndFiring == null)) {
                this._EndFiring = new StateMachineTrigger(this, "EndFiring");
            }
            return this._EndFiring;
        }
    }
    
    public virtual StateMachineTrigger OnReload {
        get {
            if ((this._OnReload == null)) {
                this._OnReload = new StateMachineTrigger(this, "OnReload");
            }
            return this._OnReload;
        }
    }
    
    public virtual StateMachineTrigger FinishedReloading {
        get {
            if ((this._FinishedReloading == null)) {
                this._FinishedReloading = new StateMachineTrigger(this, "FinishedReloading");
            }
            return this._FinishedReloading;
        }
    }
    
    public virtual StateMachineTrigger OnEmpty {
        get {
            if ((this._OnEmpty == null)) {
                this._OnEmpty = new StateMachineTrigger(this, "OnEmpty");
            }
            return this._OnEmpty;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Idle;
        }
    }
    
    public virtual Idle Idle {
        get {
            if ((this._Idle == null)) {
                this._Idle = new Idle();
            }
            return this._Idle;
        }
    }
    
    public virtual Firing Firing {
        get {
            if ((this._Firing == null)) {
                this._Firing = new Firing();
            }
            return this._Firing;
        }
    }
    
    public virtual Reloading Reloading {
        get {
            if ((this._Reloading == null)) {
                this._Reloading = new Reloading();
            }
            return this._Reloading;
        }
    }
    
    public virtual Empty Empty {
        get {
            if ((this._Empty == null)) {
                this._Empty = new Empty();
            }
            return this._Empty;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Idle.StateMachine = this;
        Idle.BeginFiring = new StateTransition("BeginFiring", Idle,Firing);
        Idle.OnReload = new StateTransition("OnReload", Idle,Reloading);
        Idle.OnEmpty = new StateTransition("OnEmpty", Idle,Empty);
        Idle.AddTrigger(BeginFiring, Idle.BeginFiring);
        Idle.AddTrigger(OnReload, Idle.OnReload);
        Idle.AddTrigger(OnEmpty, Idle.OnEmpty);
        states.Add(Idle);
        this.Firing.StateMachine = this;
        Firing.EndFiring = new StateTransition("EndFiring", Firing,Idle);
        Firing.AddTrigger(EndFiring, Firing.EndFiring);
        states.Add(Firing);
        this.Reloading.StateMachine = this;
        Reloading.FinishedReloading = new StateTransition("FinishedReloading", Reloading,Idle);
        Reloading.AddTrigger(FinishedReloading, Reloading.FinishedReloading);
        states.Add(Reloading);
        this.Empty.StateMachine = this;
        Empty.OnReload = new StateTransition("OnReload", Empty,Reloading);
        Empty.AddTrigger(OnReload, Empty.OnReload);
        states.Add(Empty);
    }
}

public class Idle : Invert.StateMachine.State {
    
    private StateTransition _BeginFiring;
    
    private StateTransition _OnReload;
    
    private StateTransition _OnEmpty;
    
    public virtual StateTransition BeginFiring {
        get {
            return this._BeginFiring;
        }
        set {
            _BeginFiring = value;
        }
    }
    
    public virtual StateTransition OnReload {
        get {
            return this._OnReload;
        }
        set {
            _OnReload = value;
        }
    }
    
    public virtual StateTransition OnEmpty {
        get {
            return this._OnEmpty;
        }
        set {
            _OnEmpty = value;
        }
    }
    
    public override string Name {
        get {
            return "Idle";
        }
    }
    
    private void BeginFiringTransition() {
        this.Transition(this.BeginFiring);
    }
    
    private void OnReloadTransition() {
        this.Transition(this.OnReload);
    }
    
    private void OnEmptyTransition() {
        this.Transition(this.OnEmpty);
    }
}

public class Firing : Invert.StateMachine.State {
    
    private StateTransition _EndFiring;
    
    public virtual StateTransition EndFiring {
        get {
            return this._EndFiring;
        }
        set {
            _EndFiring = value;
        }
    }
    
    public override string Name {
        get {
            return "Firing";
        }
    }
    
    private void EndFiringTransition() {
        this.Transition(this.EndFiring);
    }
}

public class Reloading : Invert.StateMachine.State {
    
    private StateTransition _FinishedReloading;
    
    public virtual StateTransition FinishedReloading {
        get {
            return this._FinishedReloading;
        }
        set {
            _FinishedReloading = value;
        }
    }
    
    public override string Name {
        get {
            return "Reloading";
        }
    }
    
    private void FinishedReloadingTransition() {
        this.Transition(this.FinishedReloading);
    }
}

public class Empty : Invert.StateMachine.State {
    
    private StateTransition _OnReload;
    
    public virtual StateTransition OnReload {
        get {
            return this._OnReload;
        }
        set {
            _OnReload = value;
        }
    }
    
    public override string Name {
        get {
            return "Empty";
        }
    }
    
    private void OnReloadTransition() {
        this.Transition(this.OnReload);
    }
}
