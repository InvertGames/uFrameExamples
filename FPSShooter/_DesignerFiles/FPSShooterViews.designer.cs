// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSDamageableViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Health;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSDamageableViewModel);
        }
    }
    
    public FPSDamageableViewModel FPSDamageable {
        get {
            return ((FPSDamageableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSDamageableController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        FPSDamageableViewModel fPSDamageable = ((FPSDamageableViewModel)(viewModel));
        fPSDamageable.Health = this._Health;
    }
    
    public virtual void ExecuteApplyDamage(Int32 arg) {
        this.ExecuteCommand(FPSDamageable.ApplyDamage, arg);
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSEnemyViewBase : FPSDamageableViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Speed;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSEnemyViewModel);
        }
    }
    
    public FPSEnemyViewModel FPSEnemy {
        get {
            return ((FPSEnemyViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSEnemyController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FPSEnemyViewModel fPSEnemy = ((FPSEnemyViewModel)(viewModel));
        fPSEnemy.Speed = this._Speed;
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSGameViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentPlayer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Score;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Kills;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _String1;
    
    public override string DefaultIdentifier {
        get {
            return "FPSGame";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSGameViewModel);
        }
    }
    
    public FPSGameViewModel FPSGame {
        get {
            return ((FPSGameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSGameController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        FPSGameViewModel fPSGame = ((FPSGameViewModel)(viewModel));
        fPSGame.CurrentPlayer = this._CurrentPlayer == null ? null : this._CurrentPlayer.ViewModelObject as FPSPlayerViewModel;
        fPSGame.Score = this._Score;
        fPSGame.Kills = this._Kills;
        fPSGame.String1 = this._String1;
    }
    
    public virtual void ExecuteMainMenu() {
        this.ExecuteCommand(FPSGame.MainMenu);
    }
    
    public virtual void ExecuteQuitGame() {
        this.ExecuteCommand(FPSGame.QuitGame);
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSPlayerViewBase : FPSDamageableViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _CurrentWeaponIndex;
    
    public override string DefaultIdentifier {
        get {
            return "LocalPlayer";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSPlayerViewModel);
        }
    }
    
    public FPSPlayerViewModel FPSPlayer {
        get {
            return ((FPSPlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSPlayerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FPSPlayerViewModel fPSPlayer = ((FPSPlayerViewModel)(viewModel));
        fPSPlayer.CurrentWeaponIndex = this._CurrentWeaponIndex;
    }
    
    public virtual void ExecuteNextWeapon() {
        this.ExecuteCommand(FPSPlayer.NextWeapon);
    }
    
    public virtual void ExecutePickupWeapon(FPSWeaponViewModel fPSWeapon) {
        this.ExecuteCommand(FPSPlayer.PickupWeapon, fPSWeapon);
    }
    
    public virtual void ExecutePreviousWeapon() {
        this.ExecuteCommand(FPSPlayer.PreviousWeapon);
    }
    
    public virtual void ExecuteSelectWeapon(Int32 arg) {
        this.ExecuteCommand(FPSPlayer.SelectWeapon, arg);
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSWeaponViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ZoomIndex;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MaxZooms;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public WeaponType _WeaponType;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _ReloadTime;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RoundSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MinSpread;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _BurstSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _RecoilSpeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _FireSpeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _BurstSpeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _SpreadMultiplier;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Ammo;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSWeaponViewModel);
        }
    }
    
    public FPSWeaponViewModel FPSWeapon {
        get {
            return ((FPSWeaponViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSWeaponController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        FPSWeaponViewModel fPSWeapon = ((FPSWeaponViewModel)(viewModel));
        fPSWeapon.ZoomIndex = this._ZoomIndex;
        fPSWeapon.MaxZooms = this._MaxZooms;
        fPSWeapon.WeaponType = this._WeaponType;
        fPSWeapon.ReloadTime = this._ReloadTime;
        fPSWeapon.RoundSize = this._RoundSize;
        fPSWeapon.MinSpread = this._MinSpread;
        fPSWeapon.BurstSize = this._BurstSize;
        fPSWeapon.RecoilSpeed = this._RecoilSpeed;
        fPSWeapon.FireSpeed = this._FireSpeed;
        fPSWeapon.BurstSpeed = this._BurstSpeed;
        fPSWeapon.SpreadMultiplier = this._SpreadMultiplier;
        fPSWeapon.Ammo = this._Ammo;
    }
    
    public virtual void ExecuteBeginFire() {
        this.ExecuteCommand(FPSWeapon.BeginFire);
    }
    
    public virtual void ExecuteNextZoom() {
        this.ExecuteCommand(FPSWeapon.NextZoom);
    }
    
    public virtual void ExecuteEndFire() {
        this.ExecuteCommand(FPSWeapon.EndFire);
    }
    
    public virtual void ExecuteReload() {
        this.ExecuteCommand(FPSWeapon.Reload);
    }
    
    public virtual void ExecuteBulletFired() {
        this.ExecuteCommand(FPSWeapon.BulletFired);
    }
    
    public virtual void ExecuteFinishedReloading() {
        this.ExecuteCommand(FPSWeapon.FinishedReloading);
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class WavesFPSGameViewBase : FPSGameViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _WaveKills;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _KillsToNextWave;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _CurrentWave;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SpawnWaitSeconds;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _EnemiesSpawned;
    
    public override string DefaultIdentifier {
        get {
            return "FPSGame";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(WavesFPSGameViewModel);
        }
    }
    
    public WavesFPSGameViewModel WavesFPSGame {
        get {
            return ((WavesFPSGameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WavesFPSGameController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        WavesFPSGameViewModel wavesFPSGame = ((WavesFPSGameViewModel)(viewModel));
        wavesFPSGame.WaveKills = this._WaveKills;
        wavesFPSGame.KillsToNextWave = this._KillsToNextWave;
        wavesFPSGame.CurrentWave = this._CurrentWave;
        wavesFPSGame.SpawnWaitSeconds = this._SpawnWaitSeconds;
        wavesFPSGame.EnemiesSpawned = this._EnemiesSpawned;
    }
    
    public virtual void ExecutePlayerDied() {
        this.ExecuteCommand(WavesFPSGame.PlayerDied);
    }
    
    public virtual void ExecuteRetry() {
        this.ExecuteCommand(WavesFPSGame.Retry);
    }
    
    public virtual void ExecuteNextWaveReady() {
        this.ExecuteCommand(WavesFPSGame.NextWaveReady);
    }
    
    public virtual void ExecuteSpawn() {
        this.ExecuteCommand(WavesFPSGame.Spawn);
    }
}

[DiagramInfoAttribute("FPSShooterProject")]
public abstract class FPSMenuViewBase : ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return "FPSMenu";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSMenuViewModel);
        }
    }
    
    public FPSMenuViewModel FPSMenu {
        get {
            return ((FPSMenuViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSMenuController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
    
    public virtual void ExecutePlay() {
        this.ExecuteCommand(FPSMenu.Play);
    }
}

public class FPSGameViewViewBase : FPSGameViewBase {
    
    [UFToggleGroup("Enemies")]
    [UnityEngine.HideInInspector()]
    public bool _BindEnemies = true;
    
    [UFGroup("Enemies")]
    [UnityEngine.HideInInspector()]
    public bool _EnemiesSceneFirst;
    
    [UFGroup("Enemies")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _EnemiesContainer;
    
    [UFToggleGroup("Kills")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("KillsChanged")]
    public bool _BindKills = true;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ScoreChanged")]
    public bool _BindScore = true;
    
    [UFToggleGroup("CurrentPlayer")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentPlayer = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSGameController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateEnemiesView(FPSEnemyViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void EnemiesAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void EnemiesRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void KillsChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentPlayerChanged(FPSPlayerViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindEnemies) {
            this.BindToViewCollection( FPSGame._EnemiesProperty, viewModel=>{ return CreateEnemiesView(viewModel as FPSEnemyViewModel); }, EnemiesAdded, EnemiesRemoved, _EnemiesContainer, _EnemiesSceneFirst);
        }
        if (this._BindKills) {
            this.BindProperty(FPSGame._KillsProperty, this.KillsChanged);
        }
        if (this._BindScore) {
            this.BindProperty(FPSGame._ScoreProperty, this.ScoreChanged);
        }
        if (this._BindCurrentPlayer) {
            this.BindProperty(FPSGame._CurrentPlayerProperty, this.CurrentPlayerChanged);
        }
    }
}

public partial class FPSGameView : FPSGameViewViewBase {
}

[UnityEngine.RequireComponent(typeof(FPSWeaponFire))]
[UnityEngine.RequireComponent(typeof(FPSCrosshair))]
public class FPSWeaponViewViewBase : FPSWeaponViewBase {
    
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    private FPSWeaponFire _FPSWeaponFire;
    
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    private FPSCrosshair _FPSCrosshair;
    
    [UFToggleGroup("Ammo")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("AmmoChanged")]
    public bool _BindAmmo = true;
    
    [UFToggleGroup("ZoomIndex")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ZoomIndexChanged")]
    public bool _BindZoomIndex = true;
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState = true;
    
    [UFToggleGroup("MaxZooms")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MaxZoomsChanged")]
    public bool _BindMaxZooms = true;
    
    [UFToggleGroup("WeaponType")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("WeaponTypeChanged")]
    public bool _BindWeaponType = true;
    
    [UFToggleGroup("ReloadTime")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ReloadTimeChanged")]
    public bool _BindReloadTime = true;
    
    [UFToggleGroup("RoundSize")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("RoundSizeChanged")]
    public bool _BindRoundSize = true;
    
    [UFToggleGroup("MinSpread")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MinSpreadChanged")]
    public bool _BindMinSpread = true;
    
    [UFToggleGroup("BurstSize")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("BurstSizeChanged")]
    public bool _BindBurstSize = true;
    
    [UFToggleGroup("RecoilSpeed")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("RecoilSpeedChanged")]
    public bool _BindRecoilSpeed = true;
    
    [UFToggleGroup("FireSpeed")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("FireSpeedChanged")]
    public bool _BindFireSpeed = true;
    
    [UFToggleGroup("BurstSpeed")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("BurstSpeedChanged")]
    public bool _BindBurstSpeed = true;
    
    [UFToggleGroup("SpreadMultiplier")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SpreadMultiplierChanged")]
    public bool _BindSpreadMultiplier = true;
    
    public virtual FPSWeaponFire FPSWeaponFire {
        get {
            return _FPSWeaponFire ?? (_FPSWeaponFire = this.gameObject.EnsureComponent<FPSWeaponFire>());
        }
        set {
            this._FPSWeaponFire = value;
        }
    }
    
    public virtual FPSCrosshair FPSCrosshair {
        get {
            return _FPSCrosshair ?? (_FPSCrosshair = this.gameObject.EnsureComponent<FPSCrosshair>());
        }
        set {
            this._FPSCrosshair = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSWeaponController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void AmmoChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ZoomIndexChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void StateChanged(Invert.StateMachine.State value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void MaxZoomsChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void WeaponTypeChanged(WeaponType value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ReloadTimeChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void RoundSizeChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void MinSpreadChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void BurstSizeChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void RecoilSpeedChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void FireSpeedChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void BurstSpeedChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SpreadMultiplierChanged(Single value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindAmmo) {
            this.BindProperty(FPSWeapon._AmmoProperty, this.AmmoChanged);
        }
        if (this._BindZoomIndex) {
            this.BindProperty(FPSWeapon._ZoomIndexProperty, this.ZoomIndexChanged);
        }
        if (this._BindState) {
            this.BindProperty(FPSWeapon._StateProperty, this.StateChanged);
        }
        if (this._BindMaxZooms) {
            this.BindProperty(FPSWeapon._MaxZoomsProperty, this.MaxZoomsChanged);
        }
        if (this._BindWeaponType) {
            this.BindProperty(FPSWeapon._WeaponTypeProperty, this.WeaponTypeChanged);
        }
        if (this._BindReloadTime) {
            this.BindProperty(FPSWeapon._ReloadTimeProperty, this.ReloadTimeChanged);
        }
        if (this._BindRoundSize) {
            this.BindProperty(FPSWeapon._RoundSizeProperty, this.RoundSizeChanged);
        }
        if (this._BindMinSpread) {
            this.BindProperty(FPSWeapon._MinSpreadProperty, this.MinSpreadChanged);
        }
        if (this._BindBurstSize) {
            this.BindProperty(FPSWeapon._BurstSizeProperty, this.BurstSizeChanged);
        }
        if (this._BindRecoilSpeed) {
            this.BindProperty(FPSWeapon._RecoilSpeedProperty, this.RecoilSpeedChanged);
        }
        if (this._BindFireSpeed) {
            this.BindProperty(FPSWeapon._FireSpeedProperty, this.FireSpeedChanged);
        }
        if (this._BindBurstSpeed) {
            this.BindProperty(FPSWeapon._BurstSpeedProperty, this.BurstSpeedChanged);
        }
        if (this._BindSpreadMultiplier) {
            this.BindProperty(FPSWeapon._SpreadMultiplierProperty, this.SpreadMultiplierChanged);
        }
    }
}

public partial class FPSWeaponView : FPSWeaponViewViewBase {
}

public class FPSPlayerViewViewBase : DamageableView {
    
    [UFToggleGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public bool _BindWeapons = true;
    
    [UFGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public bool _WeaponsSceneFirst;
    
    [UFGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _WeaponsContainer;
    
    [UFToggleGroup("CurrentWeaponIndex")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("CurrentWeaponIndexChanged")]
    public bool _BindCurrentWeaponIndex = true;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _CurrentWeaponIndex;
    
    public FPSPlayerViewModel FPSPlayer {
        get {
            return ((FPSPlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSPlayerViewModel);
        }
    }
    
    public override string DefaultIdentifier {
        get {
            return "LocalPlayer";
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSPlayerController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateWeaponsView(FPSWeaponViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void WeaponsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void WeaponsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentWeaponIndexChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindWeapons) {
            this.BindToViewCollection( FPSPlayer._WeaponsProperty, viewModel=>{ return CreateWeaponsView(viewModel as FPSWeaponViewModel); }, WeaponsAdded, WeaponsRemoved, _WeaponsContainer, _WeaponsSceneFirst);
        }
        if (this._BindCurrentWeaponIndex) {
            this.BindProperty(FPSPlayer._CurrentWeaponIndexProperty, this.CurrentWeaponIndexChanged);
        }
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FPSPlayerViewModel fPSPlayer = ((FPSPlayerViewModel)(viewModel));
        fPSPlayer.CurrentWeaponIndex = this._CurrentWeaponIndex;
    }
    
    public virtual void ExecuteNextWeapon() {
        this.ExecuteCommand(FPSPlayer.NextWeapon);
    }
    
    public virtual void ExecutePickupWeapon(FPSWeaponViewModel fPSWeapon) {
        this.ExecuteCommand(FPSPlayer.PickupWeapon, fPSWeapon);
    }
    
    public virtual void ExecutePreviousWeapon() {
        this.ExecuteCommand(FPSPlayer.PreviousWeapon);
    }
    
    public virtual void ExecuteSelectWeapon(Int32 arg) {
        this.ExecuteCommand(FPSPlayer.SelectWeapon, arg);
    }
}

public partial class FPSPlayerView : FPSPlayerViewViewBase {
}

public class FPSPlayerHUDViewViewBase : FPSPlayerViewBase {
    
    [UFToggleGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public bool _BindWeapons = true;
    
    [UFGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public bool _WeaponsSceneFirst;
    
    [UFGroup("Weapons")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _WeaponsContainer;
    
    [UFToggleGroup("CurrentWeaponIndex")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("CurrentWeaponIndexChanged")]
    public bool _BindCurrentWeaponIndex = true;
    
    [UFToggleGroup("NextWeapon")]
    [UnityEngine.HideInInspector()]
    public bool _BindNextWeapon = true;
    
    [UFToggleGroup("PickupWeapon")]
    [UnityEngine.HideInInspector()]
    public bool _BindPickupWeapon = true;
    
    [UFToggleGroup("Health")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("HealthChanged")]
    public bool _BindHealth = true;
    
    [UFToggleGroup("CurrentWeapon")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentWeapon = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSPlayerController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateWeaponsView(FPSWeaponViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void WeaponsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void WeaponsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentWeaponIndexChanged(Int32 value) {
    }
    
    /// Invokes NextWeaponExecuted when the NextWeapon command is executed.
    public virtual void NextWeaponExecuted() {
    }
    
    /// Invokes PickupWeaponExecuted when the PickupWeapon command is executed.
    public virtual void PickupWeaponExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HealthChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentWeaponChanged(FPSWeaponViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindWeapons) {
            this.BindToViewCollection( FPSPlayer._WeaponsProperty, viewModel=>{ return CreateWeaponsView(viewModel as FPSWeaponViewModel); }, WeaponsAdded, WeaponsRemoved, _WeaponsContainer, _WeaponsSceneFirst);
        }
        if (this._BindCurrentWeaponIndex) {
            this.BindProperty(FPSPlayer._CurrentWeaponIndexProperty, this.CurrentWeaponIndexChanged);
        }
        if (this._BindNextWeapon) {
            this.BindCommandExecuted(FPSPlayer.NextWeapon, NextWeaponExecuted);
        }
        if (this._BindPickupWeapon) {
            this.BindCommandExecuted(FPSPlayer.PickupWeapon, PickupWeaponExecuted);
        }
        if (this._BindHealth) {
            this.BindProperty(FPSPlayer._HealthProperty, this.HealthChanged);
        }
        if (this._BindCurrentWeapon) {
            this.BindProperty(FPSPlayer._CurrentWeaponProperty, this.CurrentWeaponChanged);
        }
    }
}

public partial class FPSPlayerHUDView : FPSPlayerHUDViewViewBase {
}

public class FPSWavesHudViewViewBase : WavesFPSGameViewBase {
    
    [UFToggleGroup("WaveKills")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("WaveKillsChanged")]
    public bool _BindWaveKills = true;
    
    [UFToggleGroup("CurrentWave")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("CurrentWaveChanged")]
    public bool _BindCurrentWave = true;
    
    [UFToggleGroup("KillsToNextWave")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("KillsToNextWaveChanged")]
    public bool _BindKillsToNextWave = true;
    
    [UFToggleGroup("WavesState")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("WavesStateChanged")]
    public bool _BindWavesState = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WavesFPSGameController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void WaveKillsChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentWaveChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void KillsToNextWaveChanged(Int32 value) {
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void WavesStateChanged(Invert.StateMachine.State value) {
        if (value is Wave) {
            this.OnWave();
        }
        if (value is GameOver) {
            this.OnGameOver();
        }
        if (value is WaitForNextWave) {
            this.OnWaitForNextWave();
        }
    }
    
    public virtual void OnWave() {
    }
    
    public virtual void OnGameOver() {
    }
    
    public virtual void OnWaitForNextWave() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindWaveKills) {
            this.BindProperty(WavesFPSGame._WaveKillsProperty, this.WaveKillsChanged);
        }
        if (this._BindCurrentWave) {
            this.BindProperty(WavesFPSGame._CurrentWaveProperty, this.CurrentWaveChanged);
        }
        if (this._BindKillsToNextWave) {
            this.BindProperty(WavesFPSGame._KillsToNextWaveProperty, this.KillsToNextWaveChanged);
        }
        if (this._BindWavesState) {
            this.BindProperty(WavesFPSGame._WavesStateProperty, this.WavesStateChanged);
        }
    }
}

public partial class FPSWavesHudView : FPSWavesHudViewViewBase {
}

public class FPSHUDViewViewBase : FPSGameViewBase {
    
    [UFToggleGroup("Kills")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("KillsChanged")]
    public bool _BindKills = true;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ScoreChanged")]
    public bool _BindScore = true;
    
    [UFToggleGroup("CurrentPlayer")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentPlayer = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSGameController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void KillsChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentPlayerChanged(FPSPlayerViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindKills) {
            this.BindProperty(FPSGame._KillsProperty, this.KillsChanged);
        }
        if (this._BindScore) {
            this.BindProperty(FPSGame._ScoreProperty, this.ScoreChanged);
        }
        if (this._BindCurrentPlayer) {
            this.BindProperty(FPSGame._CurrentPlayerProperty, this.CurrentPlayerChanged);
        }
    }
}

public partial class FPSHUDView : FPSHUDViewViewBase {
}

public class FPSEnemyViewViewBase : DamageableView {
    
    private IDisposable _DistanceToPlayerDisposable;
    
    [UFToggleGroup("Speed")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SpeedChanged")]
    public bool _BindSpeed = true;
    
    [UFToggleGroup("DistanceToPlayer")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("DistanceToPlayerChanged")]
    public bool _BindDistanceToPlayer = true;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Speed;
    
    public FPSEnemyViewModel FPSEnemy {
        get {
            return ((FPSEnemyViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FPSEnemyViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSEnemyController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SpeedChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void DistanceToPlayerChanged(Single value) {
    }
    
    public virtual void ResetDistanceToPlayer() {
        if (_DistanceToPlayerDisposable != null) _DistanceToPlayerDisposable.Dispose();
        _DistanceToPlayerDisposable = GetDistanceToPlayerObservable().Subscribe(FPSEnemy._DistanceToPlayerProperty).DisposeWith(this);
    }
    
    protected virtual Single CalculateDistanceToPlayer() {
        return default(Single);
    }
    
    protected virtual UniRx.IObservable<Single> GetDistanceToPlayerObservable() {
        return this.UpdateAsObservable().Select(p => CalculateDistanceToPlayer());
    }
    
    public override void Bind() {
        base.Bind();
        ResetDistanceToPlayer();
        if (this._BindSpeed) {
            this.BindProperty(FPSEnemy._SpeedProperty, this.SpeedChanged);
        }
        if (this._BindDistanceToPlayer) {
            this.BindProperty(FPSEnemy._DistanceToPlayerProperty, this.DistanceToPlayerChanged);
        }
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FPSEnemyViewModel fPSEnemy = ((FPSEnemyViewModel)(viewModel));
        fPSEnemy.Speed = this._Speed;
    }
}

public partial class FPSEnemyView : FPSEnemyViewViewBase {
}

public class FPSMainMenuViewViewBase : FPSMenuViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSMenuController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class FPSMainMenuView : FPSMainMenuViewViewBase {
}

public class DamageableViewViewBase : FPSDamageableViewBase {
    
    private IDisposable _PositionDisposable;
    
    [UFToggleGroup("Position")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PositionChanged")]
    public bool _BindPosition = true;
    
    [UFToggleGroup("Health")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("HealthChanged")]
    public bool _BindHealth = true;
    
    [UFToggleGroup("HealthState")]
    [UnityEngine.HideInInspector()]
    public bool _BindHealthState = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSDamageableController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PositionChanged(Vector3 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HealthChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HealthStateChanged(FPSPlayerState value) {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(FPSDamageable._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        if (this._BindPosition) {
            this.BindProperty(FPSDamageable._PositionProperty, this.PositionChanged);
        }
        if (this._BindHealth) {
            this.BindProperty(FPSDamageable._HealthProperty, this.HealthChanged);
        }
        if (this._BindHealthState) {
            this.BindProperty(FPSDamageable._HealthStateProperty, this.HealthStateChanged);
        }
    }
}

public abstract partial class DamageableView : DamageableViewViewBase {
}

public class WavesGameViewViewBase : FPSGameView {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _WaveKills;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _KillsToNextWave;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _CurrentWave;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SpawnWaitSeconds;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _EnemiesSpawned;
    
    public WavesFPSGameViewModel WavesFPSGame {
        get {
            return ((WavesFPSGameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(WavesFPSGameViewModel);
        }
    }
    
    public override string DefaultIdentifier {
        get {
            return "FPSGame";
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WavesFPSGameController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        WavesFPSGameViewModel wavesFPSGame = ((WavesFPSGameViewModel)(viewModel));
        wavesFPSGame.WaveKills = this._WaveKills;
        wavesFPSGame.KillsToNextWave = this._KillsToNextWave;
        wavesFPSGame.CurrentWave = this._CurrentWave;
        wavesFPSGame.SpawnWaitSeconds = this._SpawnWaitSeconds;
        wavesFPSGame.EnemiesSpawned = this._EnemiesSpawned;
    }
    
    public virtual void ExecutePlayerDied() {
        this.ExecuteCommand(WavesFPSGame.PlayerDied);
    }
    
    public virtual void ExecuteRetry() {
        this.ExecuteCommand(WavesFPSGame.Retry);
    }
    
    public virtual void ExecuteNextWaveReady() {
        this.ExecuteCommand(WavesFPSGame.NextWaveReady);
    }
    
    public virtual void ExecuteSpawn() {
        this.ExecuteCommand(WavesFPSGame.Spawn);
    }
}

public partial class WavesGameView : WavesGameViewViewBase {
}

public class FPSWeaponHUDViewViewBase : FPSWeaponViewBase {
    
    [UFToggleGroup("Ammo")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("AmmoChanged")]
    public bool _BindAmmo = true;
    
    [UFToggleGroup("RoundSize")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("RoundSizeChanged")]
    public bool _BindRoundSize = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FPSWeaponController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void AmmoChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void RoundSizeChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindAmmo) {
            this.BindProperty(FPSWeapon._AmmoProperty, this.AmmoChanged);
        }
        if (this._BindRoundSize) {
            this.BindProperty(FPSWeapon._RoundSizeProperty, this.RoundSizeChanged);
        }
    }
}

public partial class FPSWeaponHUDView : FPSWeaponHUDViewViewBase {
}

public partial class FPSWeaponFire : ViewComponent {
    
    public virtual FPSWeaponViewModel FPSWeapon {
        get {
            return ((FPSWeaponViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteBeginFire() {
        this.View.ExecuteCommand(FPSWeapon.BeginFire);
    }
    
    public virtual void ExecuteNextZoom() {
        this.View.ExecuteCommand(FPSWeapon.NextZoom);
    }
    
    public virtual void ExecuteEndFire() {
        this.View.ExecuteCommand(FPSWeapon.EndFire);
    }
    
    public virtual void ExecuteReload() {
        this.View.ExecuteCommand(FPSWeapon.Reload);
    }
    
    public virtual void ExecuteBulletFired() {
        this.View.ExecuteCommand(FPSWeapon.BulletFired);
    }
    
    public virtual void ExecuteFinishedReloading() {
        this.View.ExecuteCommand(FPSWeapon.FinishedReloading);
    }
}

public partial class FPSCrosshair : ViewComponent {
    
    public virtual FPSWeaponViewModel FPSWeapon {
        get {
            return ((FPSWeaponViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteBeginFire() {
        this.View.ExecuteCommand(FPSWeapon.BeginFire);
    }
    
    public virtual void ExecuteNextZoom() {
        this.View.ExecuteCommand(FPSWeapon.NextZoom);
    }
    
    public virtual void ExecuteEndFire() {
        this.View.ExecuteCommand(FPSWeapon.EndFire);
    }
    
    public virtual void ExecuteReload() {
        this.View.ExecuteCommand(FPSWeapon.Reload);
    }
    
    public virtual void ExecuteBulletFired() {
        this.View.ExecuteCommand(FPSWeapon.BulletFired);
    }
    
    public virtual void ExecuteFinishedReloading() {
        this.View.ExecuteCommand(FPSWeapon.FinishedReloading);
    }
}
